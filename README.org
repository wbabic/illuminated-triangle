* the Triangulator
  definition viewer
  with examples and theorems

** overview
   use the triangle to illuminate geometric ideas
   tell a story, the story of the triangle
   to illustrate ideas of symmetry

   an interactive movie with
   animated definitions, examples, theorems
   mouse over, or touch, to higlight a graphical element
   color coordinated
   symbols and graphics and sounds   

   current definition, example, theorem
   text box
   graphics box
   definition box

   a sequence of steps
   text and graphics
   play, step through, replay
   like a debugger

   use the language of geometry and symmetry
   the transforms which preserves distance, isometries

   click a definition
   walk through or let it run
   replay forward and backward
   edit the general objects, like points, that are used in the
   definition, example or theorem

   walk through the steps of a proof
   expand, collapse a proof
   see the overview
   see the details

   ability to add and edit items
   abiility to test
   ability to create challenge exercises based on user history
   store user activity
  
** the play
*** how to use it

    play by making triangles and 
    seeing their properties as you make them

    create transforsm and
    see the image of the triangle under the transformation

    create multiple transforms and compose them
    apply sequence of transforms to the triangle

    make new triangles from old
    tesselate the plane

    change perspective
    transform the camera

    project onto a sphere
    step back

    terms you need to know to play
    terms you will learn
    test user
    
*** how it works
    one tap to make a point
    move curser to draw line
    tap again to fix second point
    move to draw triangle
    tap again to fix third point
    now you have a triangle

    screen coordinates
    the coordinate system of the canvas
    origin in top left corner [0 0]
    first coordinate is from 0 to 500,
    from the left to the right
    second coordinate is top to bottom,
    also from 0 to 500

    use transforms to change coordinate system
    translate scale rotate reflect
    apply any isometry or  similarity

    project from three dimensions into two
    into the two dimensional canvas
    which is a 500 square pixel space
    with 24 bit color and 8 bit alpha
    rgba hsla
    n-fold color sets for faces of solids
    
** workflow
   interactive design
   interactive programming

   browser -> google chrome
   develop prototype that works on chrome first
   first with html and css then using hiccup and garden

   use garden to generate other browser prefixs
   treat css and javascript as targets generated from clojure
   targeted to the browser env
   also run on node, possibly

   clojure repl
   clojurescript repl, connected to browser

   current flow of work
   edit cljs in emacs
   lein cljsbuild auto dev
   automatically build javascript
   reload browser

   needs improvement
   could use cljx
   test in phantumjs
   test in clojure
   test in the repl
   play in the repl
   
*** live coding with clojure and Emacs
    Accompanying code for the blog post: http://danielsz.github.io/2014/01/20/Live-coding-with-Clojure-and-Emacs/

    modified by walter p babic

    bring together ideas from other projects:
    om-async
    infinate-diamonds geometry.clj
    modern
    sketching - this one
    om todo mvc with undo
    om tutorial, intermediate - datomic, ajax

    session
    om components
    svg
    canvas

    closure-play on numenor - google closure library, css
   
*** dev profile
    dev/user.clj

    add dev profile to  project.clj
    #+BEGIN_SRC clojure
    :profiles {:dev {:source-paths ["dev"]
                     :dependencies [[org.clojure/tools.namespace "0.2.4"]
                                    [org.clojure/java.classpath "0.2.0"]
                                    [org.clojure/test.check "0.5.7"]]}}
    #+END_SRC

    TODO make custom lien template with dev profile
    
** references
*** css
**** flexbox specification
     http://www.w3.org/TR/css3-flexbox/

**** smashing magazine tutorial
     http://www.smashingmagazine.com/2013/05/22/centering-elements-with-flexbox/

**** MDN
     using CSS flexible boxes
     https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes

**** CSS Tricks
     A domplete guide to flexbox
     http://css-tricks.com/snippets/css/a-guide-to-flexbox/

     screencast
     https://www.youtube.com/watch?v=tge9YQDAasc

**** Sean Floritto
     Sketching with CSS
     screencast

     https://www.youtube.com/watch?v=t6GoK1yGcFM

     http://www.sketchingwithcss.com/
     
**** Live Coding with lojure and Emacs
     http://danielsz.github.io/2014/01/20/Live-coding-with-Clojure-and-Emacs/

**** reset.css
     http://meyerweb.com/eric/tools/css/reset/

*** secretary
    clojurescript client side routing
    https://github.com/gf3/secretary
    
*** goog history
    http://docs.closure-library.googlecode.com/git/class_goog_History.html
    
*** session yantra merchant
    graphics represented as data
    
**** session
     https://github.com/kovasb/session
     https://github.com/kovasb/session/blob/master/src/clj/session/user.clj

**** yantra
     https://github.com/kovasb/yantra/blob/master/src/cljs/yantra/graphics.cljs
     https://github.com/kovasb/yantra/blob/master/src/cljs/yantra/datatypes.cljs

**** merchant
     https://github.com/kovasb/merchant
     https://github.com/kovasb/merchant/blob/master/src/clj/merchant/common.clj
     
** notes
   project notes
   ideas borrowed form other projects
*** om-async
    triangle maker

    borrowed clojurescript, cljsbuild and om setup
    lein cljsbuild auto dev

*** modern webapp
    yeoman
    live reload
    grunt tasks
    bower dependencies

    notes and ideas on a web page
    
*** om todo with undo
    add secretary
    
    goog.History
    
    undo ability
    redo ability
    rivendell:file:///Users/wbabic/dev/clojurescript/om/om-todomvc/todomvc/labs/architecture-examples/om-undo/index.html
    
*** infinite diamonds
    loop for rendering to canvas
    geometry.clj
    canvas
    tilings
    symmetry
** goal
   ideas on what to build
   see om-async -> triangle.org

   graphics represented as data
   ideas from yantra, session
   react-page art

   view definition

   #/centroid
   #/perp-bisector

   graphics coordinated with text
   in color in time

   app-state: current definition
   local state: current step

   mouseover or tap on symbol
   highlight graphical element

** ideas
*** give Point some style
    an ordered color set
    1 2 3 4 5  ...
    
*** add notation
    optionally give items a name
    that uses the items style
    and a label, in color
    
*** add hilightibility
    mouse over text to highlight
    symbol and graphic

*** add interacive guides
**** line
     two points define a line
***** options
      draw endpoints, first, second or both
      show midpoint when drawing a line, 
      along with perpendicular bisector

      show circles centered at endpoints as well as centered at radius

      extend line in both directions
      
**** two lines
     find the intersection of two lines
     or if they are paallel

     find the angles between them
     bisect the angles between them
     
**** triangle
     illuminate special triangles and snap to exact spot
     equilateral
     isosceles
     right
     golden
     
**** geometric concepts
     distance from a point
     distance between two points
     distance bewteen a point and a line
     distance between two lines
     angle between two lines
     
** csp
*** references
    http://www.cs.cmu.edu/~crary/819-f09/

    http://www.cs.cmu.edu/~crary/819-f09/Hoare78.pdf

    in the go lang:
    http://godoc.org/github.com/thomas11/csp

    in core.async:
    https://github.com/nodename/async-plgd/blob/master/src/hoare/coroutines.clj

    an axiomatic basis for computer programming
    http://www.cs.cmu.edu/~crary/819-f09/Hoare69.pdf

    gaurded commands, non determinacy, and formal derivation of
    programs
    http://www.cs.cmu.edu/~crary/819-f09/Dijkstra75.pdf

*** ex 1
    X :: *[c:character; west?c -> east!c]
   #+BEGIN_SRC clojure
     (ns hoare.coroutines
       (:require [clojure.core.async :refer :all]))
     
     (defn copier
       "A process that copies values from the source channel"
       [source]
       (let [c (chan)]
         (go
          (loop []
            (let [value (<! source)]
              ;; this value will be nil if close! has been called on the channel.
              ;; we cannot copy nil to c because explicitly putting a nil is not allowed.
              (if (nil? value)
                (close! c)
                (do
                  (>! c value)
                  (recur))))))
         c))
          
     (defn test-copy
       "Print out all the numbers from 0 to 9,
          then after two seconds print out the numbers from 10 to 19"
       []
       (let [west (chan)
             ;; this process will remain ready to copy...
             east (copier west)
             ;; a channel that will close after 2000 ms:
             timeout (timeout 2000)]
         
         (go
          (dotimes [i 10]
            (>! west i))
          ;; the only value that will come from the timeout is the nil when it closes:
          (<! timeout)
          (dotimes [i 10]
            (>! west (+ 10 i))))
         
         ;; this process will remain ready to print...
         (go
          (loop []
            (println (<! east))
            (recur))))
       
       ;; until all the processes go away when they go out of scope:
       nil)
   #+END_SRC

*** ex 2
X :: *[c:character; west?c ->
  [c != asterisk -> east!c 
  |c = asterisk -> west?c; 
       [c != asterisk -> east!asterisk; east!c 
       |c = asterisk ~ east!upward arrow 
  ]]   ]

| is separator in a gaurded statement

** geometry
   in clojure first
   with tests
   then to clojurescript

   geometry.clj

   cljx 
   
** unit-complex
   a closed system
   integral multiples of a twentyfourth
   dividing a line
   wrapped around the unit circle
   exact multiplication
   which is rotation
   in the plane
   about an origin

   a twentyfour step cycle

   halves thirds fourths 8ths sixths and twelths
   1/2 1/3 1/4 1/8 1/6 1/12
   Cn Dn
   group representaions

   addition modulo 24 with integers 0 .. 23
   addition modulo 1 with multiples of a 1/24
   
   an other system:
   fifths tenths twentieths hundredths
   1/5 1/10 1/20 1/100
   pentagon golden triangle golden ratio
   five fold with bilateral symmetry

** complex
   complex.clj
   Complex protocol
   rectangular polar
   one zero infinity
   
   transformations of
   translation
   rotation
   homothety
   inversion

   map center of inversion to infinity
   what does it men to be close to zero
   or close to infinity?

   play a game to get to a
   neighborhood of infinity
   or, inversly, a neighborhood of zero

** unit-quaternions
   {1 i j k}
   Q 
** geometry of complex number
   Deaux
   Complex protocol
*** Fundamental Operations
    vector addition scalar multiplication
    complex multiplication division
    polar form, exponential
    scalar product
    vector product
*** Fundamental Transformations
    translation
    rotation
    symmetry wrt a line
    inversion
    point at infinity
    
*** Anharmonic Ratio
*** Analytic Geometry
*** Circular Transformations
** implementation notes
*** things to do
    separate out platform specific code
    use cljx
    make more literate
    add more tests
    make more robust -> handle blow ups, non intersection of parallel lines
    
    add ability to mask regions
    using lines and arcs
    
    determine images of lines and circles
    under inversion in a circle

    compose transformations

    turn drawings into animations
    
    add key strokes to handlers
    arrow keys for selection
    letters for transformations
    display in legend

    add living legend
    to connect words and symbols
    to explain geometric concepts at work

    change mouse handler to persist
    triangles and
    transformations

    better handling of style

    display coordinates of points
