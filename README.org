* The Triangulator
  An interactive definition viewer
  for triangle properties
  with textual definitions and interactive graphics.

  A work in progress.

  For demo see http://wbabic.github.io/illuminated-triangle
  (use google chrome for now)
  
** Overview
   Illuminate geometric properties of a triangle
   and apply basic transformations to a triangle (todo).

*** Create triangles interactively
    See basic geometric properties as the triangle is being built.

    Three taps make three vertices.
    First will fix a point.
    Second, a line.
    And third, a triangle.

    Basic geometric properties include:
    midpoint, distance, angle,
    perpendiclar bisector, altitude,
    angle bisector.

    Triangle properties include:
    centroid, circumcircle, orthocenter,
    incircle, excircles, euler line, nine point circle.

*** Create transforms interactively
    transforms preserving:
    distance -> isometry,
    ratios of distances -> similarity,
    generalized circles -> linear fractional transformation.

    Include translation, rotation, reflection,
    homothety and inversion.

*** Step through theorems
    Theorems include:
    Centroid is concurrent and trisects the medians.

    The centroid and orthocenter divide the Euler line externally and
    internally in the ratio of 1:2. 

    Circumcircle of the orthic triangle contains the midpoints of the
    triangle as well as orthocentric midpoint triangle (nine point circle)..

    Centroid and orthocenter are centers of similtude of circumcircle
    and nine point circle.
    
** Implementation
*** the drawing loop
    This is a core.async go loop accepting drawing events as defined in
    datatypes.cljx and converts the data into calls to a graphics
    context.

    It just understands a few basic types, like Style, Point, Line,
    Circle and has no state.

    The Graphics context on the other hand does have state.

    For now it is up to the caller to track where it is at. Currently,
    it just sends redundent data. Like, always setting the style.

    So far, the styke only has fil and stroke properties.

    This is an area in need of improvement.

    But for now, it is working, sort of. 

*** notes
    abstact data
    separate style from geometry
    easy to change style
    easy to change options
*** technologies used
    This app makes use of clojure, clojurescript, om and react,
    and core.async, lein cljsbuild and cljx, and  html canvas. 
** The play
   Click a definition link.
   Make a triangle.
   See the relevant geoometric properties.

   Click a transform link.
   Make a transformation.
   Apply it to a triangle,
   ome point at a time,
   or as a whole.

   One tap to make a point.
   Move curser to draw line.
   Tap again to fix second point.
   Move to draw triangle.
   Tap again to fix third point.
   Now you have a triangle.
   
   Depending on the property,
   certain geometric ideas will be draw as the triangle is created.

   Use left and right arrow keys to cycle through properties.

** todo
*** redraw triangle
    a step by step recreation of a triangle, with appropriate
    properties included
*** break up style
    put into map with item keyword
    one group for each item
*** hook up transforms
    create-transform handlers
    
    Create multiple transforms and compose them and
    apply sequence of transforms to the triangle,
    one at a time or
    all at once.
*** add theorems
*** add iterations
