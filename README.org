* the Triangulator
  definition viewer
  with examples and theorems

** overview
   using the triangle to illuminate geometric ideas
   telling a story, the story of the triangle
   illustrating ideas of symmetry

   interactive movies
   animated definitions, examples, theorems
   text equations and symbols along with graphics, coordinated wtih
   color in time
   with sound

   map progress through the territory

   current definition, example, theorem
   text box
   graphics box
   definition box

   a sequence of steps
   text and graphics
   play, step through, replay
   like a debugger
   color coordinated
   symbols and graphics
   mouse over, or touch, to higlight a graphical element

   using the language of geometry and symmetry

   click a definition
   walk through or let it run
   replay forward and backward
   edit the general objects, like points, that are used in the
   definition, example or theorem

   walk through the steps of a proof
   expand, collapse a proof
   see the overview
   see the details

   ability to add and edit items
   abiility to test
   ability to create challenge exercises based on user history
   store user activity
  
** workflow
   interactive design
   interactive programming

   browser -> google chrome
   develop prototype that works on chrome first
   first with html and css then using hiccup and garden

   use garden to generate other browser prefixs
   treat css and javascript as targets generated from clojure
   targeted to the browser env
   also run on node, possibly

   clojure repl
   clojurescript repl, connected to browser

*** live coding with clojure and Emacs
   Accompanying code for the blog post: http://danielsz.github.io/2014/01/20/Live-coding-with-Clojure-and-Emacs/

   modified by walter p babic

   bring together ideas from other projects:
   om-async
   infinate-diamonds geometry.clj
   modern
   sketching - this one
   om todo mvc with undo
   om tutorial, intermediate - datomic, ajax

   session
   om components
   svg
   canvas

   closure-play on numenor - google closure library, css
   
*** dev profile
    dev/user.clj

    add dev profile to  project.clj
    #+BEGIN_SRC clojure
    :profiles {:dev {:source-paths ["dev"]
                     :dependencies [[org.clojure/tools.namespace "0.2.4"]
                                    [org.clojure/java.classpath "0.2.0"]
                                    [org.clojure/test.check "0.5.7"]]}}
    #+END_SRC

** references
*** css
**** flexbox specification
     http://www.w3.org/TR/css3-flexbox/

**** smashing magazine tutorial
     http://www.smashingmagazine.com/2013/05/22/centering-elements-with-flexbox/

**** MDN
     using CSS flexible boxes
     https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes

**** CSS Tricks
     A domplete guide to flexbox
     http://css-tricks.com/snippets/css/a-guide-to-flexbox/

     screencast
     https://www.youtube.com/watch?v=tge9YQDAasc


**** Sean Floritto
     Sketching with CSS
     screencast

     https://www.youtube.com/watch?v=t6GoK1yGcFM

     http://www.sketchingwithcss.com/
     
**** Live Coding with lojure and Emacs
     http://danielsz.github.io/2014/01/20/Live-coding-with-Clojure-and-Emacs/

**** reset.css
     http://meyerweb.com/eric/tools/css/reset/

*** secretary
    clojurescript client side routing
    https://github.com/gf3/secretary
*** goog history
    http://docs.closure-library.googlecode.com/git/class_goog_History.html
*** om todo ex with undo

*** session yantra merchant
    graphics represented as data
**** session
     https://github.com/kovasb/session
     https://github.com/kovasb/session/blob/master/src/clj/session/user.clj

**** yantra
     https://github.com/kovasb/yantra/blob/master/src/cljs/yantra/graphics.cljs
     https://github.com/kovasb/yantra/blob/master/src/cljs/yantra/datatypes.cljs

**** merchant
     https://github.com/kovasb/merchant
     https://github.com/kovasb/merchant/blob/master/src/clj/merchant/common.clj
     
** notes
   project notes
   ideas borrowed form other projects
*** om-async
    triangle maker

    borrowed clojurescript, cljsbuild and om setup
    lein cljsbuild auto dev

*** modern webapp
    yeoman
    live reload
    grunt tasks
    bower dependencies

    notes and ideas on a web page
    
*** om todo with undo
    add secretary
    
    goog.History
    
    undo ability
    redo ability
    rivendell:file:///Users/wbabic/dev/clojurescript/om/om-todomvc/todomvc/labs/architecture-examples/om-undo/index.html
    
*** infinite diamonds
    loop for rendering to canvas
    geometry.clj
    canvas
    tilings
    symmetry
** goal
   ideas on how to build this thing

   see om-async -> triangle.org
   see modern
   on rivendell:
   http://127.0.0.1:9000/index.html

   ssh://wbabic@Numenor.local/usr/local/git_root/modern.git

   rivendell:~/dev/html5/modern

   graphics represented as data
   ideas from yantra, session
   react-page art
   see journal.org entry

   view definition

   #/centroid
   #/perp-bisector

   view definition
   step through or play

   graphics coordinated with text
   in color in time

   app-state: current definition
   local state: current step

   mouseover or tap on symbol
   highlight graphical element


   (point x y)

** ideas
*** give Point some style
*** change Line rendering to render its points also
    using their style
    give some style to the line as well
*** add notation
    optionally give items a name
    that uses the items style
    
*** add hilightibility
    mouse over to highlight
    symbol and graphic
    
** csp

   http://www.cs.cmu.edu/~crary/819-f09/

   http://www.cs.cmu.edu/~crary/819-f09/Hoare78.pdf

   in the go lang:
   http://godoc.org/github.com/thomas11/csp

   in core.async:
   https://github.com/nodename/async-plgd/blob/master/src/hoare/coroutines.clj

   an axiomatic basis for computer programming
   http://www.cs.cmu.edu/~crary/819-f09/Hoare69.pdf

   gaurded commands, non determinacy, and formal derivation of
   programs
   http://www.cs.cmu.edu/~crary/819-f09/Dijkstra75.pdf

   X :: *[c:character; west?c -> east!c]

   #+BEGIN_SRC clojure
     (ns hoare.coroutines
       (:require [clojure.core.async :refer :all]))
     
     (defn copier
       "A process that copies values from the source channel"
       [source]
       (let [c (chan)]
         (go
          (loop []
            (let [value (<! source)]
              ;; this value will be nil if close! has been called on the channel.
              ;; we cannot copy nil to c because explicitly putting a nil is not allowed.
              (if (nil? value)
                (close! c)
                (do
                  (>! c value)
                  (recur))))))
         c))
          
     (defn test-copy
       "Print out all the numbers from 0 to 9,
          then after two seconds print out the numbers from 10 to 19"
       []
       (let [west (chan)
             ;; this process will remain ready to copy...
             east (copier west)
             ;; a channel that will close after 2000 ms:
             timeout (timeout 2000)]
         
         (go
          (dotimes [i 10]
            (>! west i))
          ;; the only value that will come from the timeout is the nil when it closes:
          (<! timeout)
          (dotimes [i 10]
            (>! west (+ 10 i))))
         
         ;; this process will remain ready to print...
         (go
          (loop []
            (println (<! east))
            (recur))))
       
       ;; until all the processes go away when they go out of scope:
       nil)
   #+END_SRC


X :: *[c:character; west?c ->
  [c != asterisk -> east!c 
  |c = asterisk -> west?c; 
       [c != asterisk -> east!asterisk; east!c 
       |c = asterisk ~ east!upward arrow 
  ]]   ]

| is separator in a gaurded statement



