* The Triangulator
  An interactive definition viewer
  for triangle properties and transformations,
  with textual definitions and interactive graphics.

  For demo see http://wbabic.github.io/illuminated-triangle
  (use google chrome for now)

** Overview
   Illuminate geometric properties of a triangle
   and apply basic transformations to a triangle (todo).

*** Create triangles interactively
    See basic geometric properties as the triangle is being built.

    Three taps make three vertices.
    First will fix a point.
    Second, a line.
    And third, a triangle.

    Basic geometric properties include:
    midpoint, distance, angle,
    perpendiclar bisector, altitude,
    angle bisector.

    Triangle properties include:
    centroid, circumcircle, orthocenter,
    incircle, excircles, euler line, nine point circle.

*** Create transforms interactively
    Explore transforms preserving:

    distance -> isometry,

    ratios of distances -> similarity,

    generalized circles -> linear fractional transformation.

    Transforms include translation, rotation, reflection,
    dilatation and inversion.

*** Step through theorems
    Theorems include:

    The centroid is concurrent and trisects the medians.

    The centroid and orthocenter divide the Euler line externally and
    internally in the ratio of 1:2.

    The circumcircle of the orthic triangle contains the midpoints of the
    triangle as well as orthocentric-midpoints triangle (nine point circle).

    The centroid and orthocenter are centers of similtude of the circumcircle
    and the nine point circle and the radius of the circumcircle is twice
    the radius of the nine point circle.

** Implementation
*** the drawing loop
    There is a method in draw.cljs, drawing-loop, that creates and
    returns a drawing channel and takes canvas, width and height as
    arguments. It has a core.async go-loop which accepts drawing data
    from the drawing channel and calls render on the drawing data,
    passing in a graphics context created from the canvas argument.
    The render method is defined in the IRender protocal which has a
    single method, render, which accepts a canvas graphics context.

    The data types that implement the IRender protocal are Style,
    Point, Line, Circle, Triangle and Rectangle and they provide the
    means to render themselves to the canvas.

    So far, the Style handles fill, stroke, lineWidth and lineDash properties.

*** notes
    Graphics are represented as data and can be sent to a channel to
    be rendered. Geometry is separate from style, merged when it is time
    to render. This allows for testing of geometry and rendering
    methohds without a graphics context. Also, it would be possible
    to provide rendering to other contexts, like svg, with out
    changing the geometry and style code.

    Also, since the geometry, style and handlers are in cljx form,
    they can be used on the server and tested from clojure and
    inspected from a clojure repl.

*** technologies used
    This app makes use of clojure, clojurescript, om and react,
    core.async, lein cljsbuild and cljx, and html canvas.
** Animation
*** animate properties of an item
    animate geometric properties when visiting an item.
**** toggle each property in turn.

**** illuminate a basic geometric property
     perpendicular bisector of a line and midpoint
     altitudes of a triangle
     angle bisectors of two intersecting lines

     given a triangle and a property to illuminate,
     create a sequence of drawing data and
     send it to a drawing channel
     to render it to a canvas

     geometry is sepaerate from rendering and style

*** redraw triangle
    Redraw triangle, one property at a time.

    A step by step recreation of a triangle, with appropriate
    properties included, pausing between each one.

*** iterations
    Perform sequence of iterations for the given triangle until the
    canvas space is filled.

*** tilings
    right isosceles
    30 60 90
    equilateral
    scalene

** Navigation
   Arraw keys provide navigation through section, entries and items.
   Up and Down moves between sections, entries and items,
   Left and Right cycles through elements in current level.

   When a section is selected, Left and Right cycles between
   selections.

   Down moves into the entries of the current slection. Then Left and
   Right cycles through the entries.

   Down again will move to the item level where Left and Right will
   then cycle through the items of the curent entry.

   Up will then move to the entry level and Up again will go to the
   section level.

** Selection
   While viewing an item, checking the displayed properties will set
   them for the current entry.

   Different entries have separate properties.

   All will display properties of all the entries

** The play
   Click a definition link.
   Make a triangle.
   See the relevant geoometric properties.

   Click a transform link.
   Make a transformation.
   Apply it to a triangle,
   ome point at a time,
   or as a whole.

   One tap to make a point.
   Move curser to draw line.
   Tap again to fix second point.
   Move to draw triangle.
   Tap again to fix third point.
   Now you have a triangle.

   Depending on the property,
   certain geometric ideas will be draw as the triangle is created.

   Use left and right arrow keys to cycle through properties.

** Reference
   Coxeter's Intro to Geametry.
** Todo
*** hook up transforms
    create-transform handlers

    Create multiple transforms and compose them and
    apply sequence of transforms to the triangle,
    one at a time or
    all at once.

*** add theorems
*** add iterations
*** add tilings

** Changes
   remove custom entry in triangles section
   remove displaying of section props
   update text

*** current
    add animate button in triangle controls for item in triangles section
    instead of redrawing triangle,
    animate the drawing of its components

    new method:
    handle-redraw
    in handlers.cljs

    new method:
    animate-triangle
    that returns a vector of sequences of animations
    in render.cljs

    in render.cljs
    pass in tri-style to draw-edge method
    called in components.cljs


    create a data sequence
    send it to draaw chan


    in centroid, for example,
    first draw the midpoints, one at a time, then
    draw each line from a vertex to the midpoint of the opposite side
    the midpoints can be constructed using circles,
    need the intersection of two circles, or,
    use linear algebra to find the midpoints

    in circumcircle,
    show that perp bisectors are concurrent and find the circumradius

    in orthocenter,
    construct altitudes, find intersection,

*** todo
    add basic constructions section containing perpendicular bisectors
    and midpoints and angle bisectors
    show geometric construction and algebraic algorithm and code that
    performs the calculation

    change current basic entry in triangles section to show
    concurrency

    have ret-chan return a vector like [:triangle tri-data]
    instead of just tri-data
    extend it to  [:reflection ref-data]
    to handle trasformations too
    in handlers/handle event
    called from item-controller/will-mount

    fix mouse clicks that accumulate
    in canvas and show up when new triangle button
    is pressed

    handle dragging of points of existing triangle

    clean up draw-triangle in render.cljx
** Usage
   lein cljx once
   lein cljsbuild once dev
   lein do clean, cljsbuild clean, cljx once,cljsbuild once dev
   lein repl

   ;; start server from clojure repl
   user=> (go)

   open url in browser
